#version 330 core

<<<<<<< HEAD
// Interpolated values from the vertex shaders
in vec2 UV;
in vec4 particlecolor;

// Ouput data
out vec4 color;

uniform sampler2D myTextureSampler;

void main(void){
	// Output color = color of the texture at the specified UV
	color = texture( myTextureSampler, UV ) * particlecolor;

=======
out vec4 outColor;
in vec3 exNormal; // Phong
in vec3 exSurface; // Phong (specular)
in vec3 lightPos;


void main(void)
{	
	
<<<<<<< HEAD
	vec3 lightPos = vec3(0.0,0.0,2.0);
=======
	//vec3 lightPos = vec3(0.0,20,20.0);
>>>>>>> Strut
	vec3 Lm = normalize(lightPos - exSurface);  //vector from light to vertex
	
	float diffuse = dot(Lm, exNormal);
	diffuse = max(0.0, diffuse);

	
	vec3 Rm = 2*dot(Lm,normalize(exNormal))*normalize(exNormal)-Lm;  //Perfect reflection of light vector
	vec3 Vm = normalize(-exSurface);  //View Vector		
	float specular = dot(Rm, Vm);
	if (specular > 0.0)
		specular = 1.0 * pow(specular, 150.0);
	specular = max(specular, 0.0);	
	
	float intensity =  0.7 * diffuse + 30.0 * specular; 
	
	outColor = vec4(intensity, intensity,intensity, 1.0); 
>>>>>>> 2ce1cbe056434e636e0341dae201334c3ff85fad
}
